# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import datahash_pb2 as datahash__pb2


class DataHashStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.hash_md5 = channel.unary_unary(
                '/DataHash/hash_md5',
                request_serializer=datahash__pb2.Text.SerializeToString,
                response_deserializer=datahash__pb2.Text.FromString,
                )
        self.hash_sha256 = channel.unary_unary(
                '/DataHash/hash_sha256',
                request_serializer=datahash__pb2.Text.SerializeToString,
                response_deserializer=datahash__pb2.Text.FromString,
                )
        self.hello = channel.unary_unary(
                '/DataHash/hello',
                request_serializer=datahash__pb2.Text.SerializeToString,
                response_deserializer=datahash__pb2.Text.FromString,
                )
        self.stream_text = channel.unary_stream(
                '/DataHash/stream_text',
                request_serializer=datahash__pb2.Text.SerializeToString,
                response_deserializer=datahash__pb2.Text.FromString,
                )
        self.input_stream = channel.stream_unary(
                '/DataHash/input_stream',
                request_serializer=datahash__pb2.Text.SerializeToString,
                response_deserializer=datahash__pb2.Text.FromString,
                )
        self.dual_stream = channel.stream_stream(
                '/DataHash/dual_stream',
                request_serializer=datahash__pb2.Text.SerializeToString,
                response_deserializer=datahash__pb2.Text.FromString,
                )


class DataHashServicer(object):
    """Missing associated documentation comment in .proto file."""

    def hash_md5(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hash_sha256(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stream_text(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def input_stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dual_stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataHashServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'hash_md5': grpc.unary_unary_rpc_method_handler(
                    servicer.hash_md5,
                    request_deserializer=datahash__pb2.Text.FromString,
                    response_serializer=datahash__pb2.Text.SerializeToString,
            ),
            'hash_sha256': grpc.unary_unary_rpc_method_handler(
                    servicer.hash_sha256,
                    request_deserializer=datahash__pb2.Text.FromString,
                    response_serializer=datahash__pb2.Text.SerializeToString,
            ),
            'hello': grpc.unary_unary_rpc_method_handler(
                    servicer.hello,
                    request_deserializer=datahash__pb2.Text.FromString,
                    response_serializer=datahash__pb2.Text.SerializeToString,
            ),
            'stream_text': grpc.unary_stream_rpc_method_handler(
                    servicer.stream_text,
                    request_deserializer=datahash__pb2.Text.FromString,
                    response_serializer=datahash__pb2.Text.SerializeToString,
            ),
            'input_stream': grpc.stream_unary_rpc_method_handler(
                    servicer.input_stream,
                    request_deserializer=datahash__pb2.Text.FromString,
                    response_serializer=datahash__pb2.Text.SerializeToString,
            ),
            'dual_stream': grpc.stream_stream_rpc_method_handler(
                    servicer.dual_stream,
                    request_deserializer=datahash__pb2.Text.FromString,
                    response_serializer=datahash__pb2.Text.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DataHash', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataHash(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def hash_md5(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataHash/hash_md5',
            datahash__pb2.Text.SerializeToString,
            datahash__pb2.Text.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hash_sha256(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataHash/hash_sha256',
            datahash__pb2.Text.SerializeToString,
            datahash__pb2.Text.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataHash/hello',
            datahash__pb2.Text.SerializeToString,
            datahash__pb2.Text.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stream_text(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DataHash/stream_text',
            datahash__pb2.Text.SerializeToString,
            datahash__pb2.Text.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def input_stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/DataHash/input_stream',
            datahash__pb2.Text.SerializeToString,
            datahash__pb2.Text.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dual_stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/DataHash/dual_stream',
            datahash__pb2.Text.SerializeToString,
            datahash__pb2.Text.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
